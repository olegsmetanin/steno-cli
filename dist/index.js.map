{"version":3,"sources":["../node_modules/@commander-js/extra-typings/index.js","../node_modules/@commander-js/extra-typings/esm.mjs","../src/index.ts","../src/decryptImage.ts","../src/defaults.ts","../src/png.ts","../src/utils.ts","../src/encryptImage.ts"],"sourcesContent":["const commander = require('commander');\n\n// @ts-check\n\nexports = module.exports = {};\n\n// Return a different global program than commander,\n// and don't also return it as default export.\nexports.program = new commander.Command();\n\n/**\n * Expose classes. The FooT versions are just types, so return Commander original implementations!\n */\n\nexports.Argument = commander.Argument;\nexports.Command = commander.Command;\nexports.CommanderError = commander.CommanderError;\nexports.Help = commander.Help;\nexports.InvalidArgumentError = commander.InvalidArgumentError;\nexports.InvalidOptionArgumentError = commander.InvalidArgumentError; // Deprecated\nexports.Option = commander.Option;\n\n// In Commander, the create routines end up being aliases for the matching\n// methods on the global program due to the (deprecated) legacy default export.\n// Here we roll our own, the way Commander might in future.\nexports.createCommand = (name) => new commander.Command(name);\nexports.createOption = (flags, description) => new commander.Option(flags, description);\nexports.createArgument = (name, description) => new commander.Argument(name, description);\n","import extraTypingsCommander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help\n} = extraTypingsCommander;\n","import { Command } from '@commander-js/extra-typings';\nimport { readFileSync, writeFileSync } from 'fs';\n\nimport { decryptImage } from './decryptImage';\nimport { encryptImage } from './encryptImage';\n\nconst program = new Command();\n\nprogram.name('steno-cli').version('0.1.0').description('steno-cli');\n\nprogram\n  .command('encrypt <password> <input-file> <input-png> <output-png>')\n  .description('encrypt <input-file> file to <input-png> using password <password> and save to <output-png>')\n  .action((password, input_file, input_png, output_png) => {\n    if (password.length < 8) {\n      console.log('password should be at least eight characters long');\n    } else {\n      console.log(`encrypt ${input_file} file to ${input_png} and save to ${output_png}`);\n      const imageBuf = readFileSync(input_png);\n      const srcBuf = readFileSync(input_file);\n      const encodedFile = encryptImage(imageBuf, srcBuf, undefined, password);\n      writeFileSync(output_png, encodedFile);\n    }\n  });\n\nprogram\n  .command('decrypt <password> <input-png> <output-file>')\n  .description('decrypt <input-png> to <output-file> using password <password>')\n  .action((password, input_png, output_file) => {\n    console.log(`decrypt ${input_png} file to ${output_file}`);\n    const imageBuf = readFileSync(input_png);\n    const decodedFile = decryptImage(imageBuf, undefined, password);\n    writeFileSync(output_file, decodedFile);\n  });\n\nprogram.parse();\n","// Import downloaded module\nimport { PNG } from 'pngjs';\n\n// Import constants\nimport { BYTE_SIZE, LENGTH_BYTES, SHASUM_BYTES } from './defaults';\n// Import custom functions\nimport { isRgbByte } from './png';\nimport { decryptBuffer, getShasumData } from './utils';\n\nconst extractBinary = (b: number) => b % 2;\n\nconst splitBitsAsBytes = (bitsAsBytes: Buffer) => (_: number, i: number) => {\n  const start = i * BYTE_SIZE;\n  return bitsAsBytes.slice(start, start + BYTE_SIZE);\n};\n\nconst combineByteIntoBit = (accumulator: number, currentByte: number, i: number) => {\n  const shiftDistance = BYTE_SIZE - 1 - i;\n  /* tslint:disable:no-bitwise */\n  return (currentByte << shiftDistance) | accumulator;\n  /* tslint:enable:no-bitwise */\n};\n\nconst combineBufferIntoByte = (buffer: Buffer) => buffer.reduce(combineByteIntoBit, 0);\n\nconst combineBits = (bitsAsBytes: Buffer) => {\n  const n = Math.ceil(bitsAsBytes.length / BYTE_SIZE);\n  return Array(n).fill(null).map(splitBitsAsBytes(bitsAsBytes)).map(combineBufferIntoByte);\n};\n\nconst decode = (data: Buffer): Buffer => {\n  const bitsAsBytes = data.map(extractBinary) as Buffer;\n  const combined = combineBits(bitsAsBytes);\n  return Buffer.from(combined);\n};\n\nconst messageMatchesShasum = (message: Buffer, shasum: Buffer): boolean => getShasumData(message).equals(shasum);\n\nconst extractData = (imageData: Buffer) => {\n  const rgb: Uint8Array = imageData.filter(isRgbByte);\n\n  const lengthDataSize = LENGTH_BYTES * BYTE_SIZE;\n  const shasumDataSize = SHASUM_BYTES * BYTE_SIZE;\n  const lengthAndShasumSize = lengthDataSize + shasumDataSize;\n\n  const lengthData = rgb.slice(0, lengthDataSize) as Buffer;\n  const decodedLengthData = decode(lengthData);\n  const length = parseInt(decodedLengthData.toString('hex'), 16) * BYTE_SIZE;\n\n  const shasumData = rgb.slice(lengthDataSize, lengthAndShasumSize) as Buffer;\n  const decodedShasumData = decode(shasumData);\n\n  const messageData = rgb.slice(lengthAndShasumSize, lengthAndShasumSize + length) as Buffer;\n  const decodedMessageData = decode(messageData);\n\n  if (!messageMatchesShasum(decodedMessageData, decodedShasumData))\n    throw new Error('Shasum did not match decoded message');\n\n  return decodedMessageData;\n};\n\nexport const decryptImage = (image: Buffer, encoding?: BufferEncoding, password?: string) => {\n  const png: PNG = PNG.sync.read(image);\n  const data = extractData(png.data);\n  const output = password ? decryptBuffer(data, password) : data;\n  return encoding ? output.toString(encoding) : output;\n};\n","export const BYTE_SIZE = 8;\nexport const ENCRYPTION_METHOD = 'aes256';\nexport const LENGTH_BYTES = 8;\nexport const SHASUM_BYTES = 32;\n","// const { BYTE_SIZE } = require('./defaults')\nimport { BYTE_SIZE } from './defaults';\n\nconst CHANNEL_COUNT = ['r', 'g', 'b', 'a'].length;\n\nexport const countBytesForNRgbBytes = (n: number) => Math.floor((n * BYTE_SIZE * CHANNEL_COUNT) / (CHANNEL_COUNT - 1));\n\nexport const isAlphaByte = (_: number, i: number) => !((i + 1) % CHANNEL_COUNT);\nexport const isRgbByte = (_: number, i: number) => (i + 1) % CHANNEL_COUNT;\n\nexport const recombineRgbAndAlpha = (rgb: Buffer, alpha: Uint8Array) =>\n  Buffer.from(\n    Array(rgb.length + alpha.length)\n      .fill(null)\n      .map((_, i) => ((i + 1) % CHANNEL_COUNT ? rgb[i - Math.floor(i / CHANNEL_COUNT)] : alpha[i % CHANNEL_COUNT]))\n  );\n\nexport const splitRgbAndAlpha = (data: Uint8Array) => {\n  const rgbBytes = data.filter(isRgbByte);\n  const alphaBytes = data.filter(isAlphaByte);\n  return [rgbBytes, alphaBytes];\n};\n","import { createCipheriv, createDecipheriv, createHash, scryptSync } from 'crypto';\n\nimport { ENCRYPTION_METHOD } from './defaults';\n\nexport const decryptBuffer = (data: Buffer, password: string) => {\n  const iv = scryptSync(password, password.slice(4), 16);\n  const key = scryptSync(password, password.slice(-4), 32);\n  const decipher = createDecipheriv(ENCRYPTION_METHOD, key, iv);\n  const chunk1 = decipher.update(data);\n  const chunk2 = decipher.final();\n  return Buffer.concat([chunk1, chunk2], chunk1.length + chunk2.length);\n};\n\nexport const encryptBuffer = (message: Buffer, password: string) => {\n  const iv = scryptSync(password, password.slice(4), 16);\n  const key = scryptSync(password, password.slice(-4), 32);\n  const cipher = createCipheriv(ENCRYPTION_METHOD, key, iv);\n  const chunk1 = cipher.update(message);\n  const chunk2 = cipher.final();\n  return Buffer.concat([chunk1, chunk2], chunk1.length + chunk2.length);\n};\n\nexport const getShasumData = (message: Buffer) => createHash('sha256').update(message).digest();\n","import { PNG } from 'pngjs';\n\nimport { BYTE_SIZE, LENGTH_BYTES, SHASUM_BYTES } from './defaults';\nimport { countBytesForNRgbBytes, recombineRgbAndAlpha, splitRgbAndAlpha } from './png';\nimport { encryptBuffer, getShasumData } from './utils';\n\nconst getLengthData = (message: Buffer) => {\n  const lengthHex = message.length.toString(16);\n  const lengthBuffer = Buffer.from(lengthHex.length % 2 ? `0${lengthHex}` : lengthHex, 'hex');\n  const pad = Buffer.alloc(LENGTH_BYTES - lengthBuffer.length);\n  return Buffer.concat([pad, lengthBuffer], LENGTH_BYTES);\n};\n\nconst getBit = (data: Buffer) => (i: number) => {\n  const byteIndex = Math.floor(i / BYTE_SIZE);\n  const bitIndex = i % BYTE_SIZE;\n\n  const byte = data[byteIndex];\n  const shiftDistance = BYTE_SIZE - 1 - bitIndex;\n  /* tslint:disable:no-bitwise */\n  return (byte >> shiftDistance) % 2;\n  /* tslint:enable:no-bitwise */\n};\n\n/* tslint:disable:no-bitwise */\nconst addDataToByte = (data: Buffer) => (byte: number, i: number) => ((byte >> 1) << 1) | getBit(data)(i);\n/* tslint:enable:no-bitwise */\n\nconst embedData = ([data, bed]: any[]) => bed.map(addDataToByte(data));\n\nconst store = (imageData: Buffer, message: Buffer) => {\n  const bytesAvailable = imageData.length;\n  const bytesToStore = LENGTH_BYTES + SHASUM_BYTES + message.length;\n  const bytesRequired = countBytesForNRgbBytes(bytesToStore);\n\n  if (bytesAvailable < bytesRequired) throw new Error('Image is not large enough to store message');\n\n  const lengthData = getLengthData(message);\n  const shasumData = getShasumData(message);\n\n  const bytesToUse = imageData.slice(0, bytesRequired);\n  const bytesToLeave = imageData.slice(bytesRequired);\n\n  const [rgb, alpha] = splitRgbAndAlpha(bytesToUse);\n\n  const lengthDataSize = LENGTH_BYTES * BYTE_SIZE;\n  const shasumDataSize = SHASUM_BYTES * BYTE_SIZE;\n\n  const bytesToUseWithLengthData = rgb.slice(0, lengthDataSize);\n  const bytesToUseWithShasumData = rgb.slice(lengthDataSize, lengthDataSize + shasumDataSize);\n  const bytesToUseWithMessageData = rgb.slice(lengthDataSize + shasumDataSize);\n\n  const embeddedData = Buffer.concat(\n    [\n      [lengthData, bytesToUseWithLengthData],\n      [shasumData, bytesToUseWithShasumData],\n      [message, bytesToUseWithMessageData],\n    ].map(embedData),\n    rgb.length\n  );\n\n  const recombined = recombineRgbAndAlpha(embeddedData, alpha);\n  const adjustedImageData = Buffer.concat([recombined, bytesToLeave], bytesAvailable);\n\n  return adjustedImageData;\n};\n\nexport const encryptImage = (image: Buffer, message: string | Buffer, encoding?: BufferEncoding, password?: string) => {\n  const messageBuffer: Buffer = Buffer.isBuffer(message) ? message : Buffer.from(message, encoding);\n  const secretBuffer: Buffer = password ? encryptBuffer(messageBuffer, password) : messageBuffer;\n\n  const png: PNG = PNG.sync.read(image);\n  const data = store(png.data, secretBuffer);\n  const adjustedPng: PNG = Object.assign({}, png, { data });\n\n  return PNG.sync.write(adjustedPng);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,sDAAAA,UAAAC,SAAA;AAAA;AAAA,QAAM,YAAY,QAAQ,WAAW;AAIrC,IAAAD,WAAUC,QAAO,UAAU,CAAC;AAI5B,IAAAD,SAAQ,UAAU,IAAI,UAAU,QAAQ;AAMxC,IAAAA,SAAQ,WAAW,UAAU;AAC7B,IAAAA,SAAQ,UAAU,UAAU;AAC5B,IAAAA,SAAQ,iBAAiB,UAAU;AACnC,IAAAA,SAAQ,OAAO,UAAU;AACzB,IAAAA,SAAQ,uBAAuB,UAAU;AACzC,IAAAA,SAAQ,6BAA6B,UAAU;AAC/C,IAAAA,SAAQ,SAAS,UAAU;AAK3B,IAAAA,SAAQ,gBAAgB,CAAC,SAAS,IAAI,UAAU,QAAQ,IAAI;AAC5D,IAAAA,SAAQ,eAAe,CAAC,OAAO,gBAAgB,IAAI,UAAU,OAAO,OAAO,WAAW;AACtF,IAAAA,SAAQ,iBAAiB,CAAC,MAAM,gBAAgB,IAAI,UAAU,SAAS,MAAM,WAAW;AAAA;AAAA;;;AC3BxF,mBAAkC;AAG3B,IAAM;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAI,aAAAE;;;ACdJ,gBAA4C;;;ACA5C,mBAAoB;;;ACDb,IAAM,YAAY;AAClB,IAAM,oBAAoB;AAC1B,IAAM,eAAe;AACrB,IAAM,eAAe;;;ACA5B,IAAM,gBAAgB,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE;AAEpC,IAAM,yBAAyB,CAAC,MAAc,KAAK,MAAO,IAAI,YAAY,iBAAkB,gBAAgB,EAAE;AAE9G,IAAM,cAAc,CAAC,GAAW,MAAc,GAAG,IAAI,KAAK;AAC1D,IAAM,YAAY,CAAC,GAAW,OAAe,IAAI,KAAK;AAEtD,IAAM,uBAAuB,CAAC,KAAa,UAChD,OAAO;AAAA,EACL,MAAM,IAAI,SAAS,MAAM,MAAM,EAC5B,KAAK,IAAI,EACT,IAAI,CAAC,GAAG,OAAQ,IAAI,KAAK,gBAAgB,IAAI,IAAI,KAAK,MAAM,IAAI,aAAa,CAAC,IAAI,MAAM,IAAI,aAAa,CAAE;AAChH;AAEK,IAAM,mBAAmB,CAAC,SAAqB;AACpD,QAAM,WAAW,KAAK,OAAO,SAAS;AACtC,QAAM,aAAa,KAAK,OAAO,WAAW;AAC1C,SAAO,CAAC,UAAU,UAAU;AAC9B;;;ACrBA,oBAAyE;AAIlE,IAAM,gBAAgB,CAAC,MAAc,aAAqB;AAC/D,QAAM,SAAK,0BAAW,UAAU,SAAS,MAAM,CAAC,GAAG,EAAE;AACrD,QAAM,UAAM,0BAAW,UAAU,SAAS,MAAM,EAAE,GAAG,EAAE;AACvD,QAAM,eAAW,gCAAiB,mBAAmB,KAAK,EAAE;AAC5D,QAAM,SAAS,SAAS,OAAO,IAAI;AACnC,QAAM,SAAS,SAAS,MAAM;AAC9B,SAAO,OAAO,OAAO,CAAC,QAAQ,MAAM,GAAG,OAAO,SAAS,OAAO,MAAM;AACtE;AAEO,IAAM,gBAAgB,CAAC,SAAiB,aAAqB;AAClE,QAAM,SAAK,0BAAW,UAAU,SAAS,MAAM,CAAC,GAAG,EAAE;AACrD,QAAM,UAAM,0BAAW,UAAU,SAAS,MAAM,EAAE,GAAG,EAAE;AACvD,QAAM,aAAS,8BAAe,mBAAmB,KAAK,EAAE;AACxD,QAAM,SAAS,OAAO,OAAO,OAAO;AACpC,QAAM,SAAS,OAAO,MAAM;AAC5B,SAAO,OAAO,OAAO,CAAC,QAAQ,MAAM,GAAG,OAAO,SAAS,OAAO,MAAM;AACtE;AAEO,IAAM,gBAAgB,CAAC,gBAAoB,0BAAW,QAAQ,EAAE,OAAO,OAAO,EAAE,OAAO;;;AHb9F,IAAM,gBAAgB,CAAC,MAAc,IAAI;AAEzC,IAAM,mBAAmB,CAAC,gBAAwB,CAAC,GAAW,MAAc;AAC1E,QAAM,QAAQ,IAAI;AAClB,SAAO,YAAY,MAAM,OAAO,QAAQ,SAAS;AACnD;AAEA,IAAM,qBAAqB,CAAC,aAAqB,aAAqB,MAAc;AAClF,QAAM,gBAAgB,YAAY,IAAI;AAEtC,SAAQ,eAAe,gBAAiB;AAE1C;AAEA,IAAM,wBAAwB,CAAC,WAAmB,OAAO,OAAO,oBAAoB,CAAC;AAErF,IAAM,cAAc,CAAC,gBAAwB;AAC3C,QAAM,IAAI,KAAK,KAAK,YAAY,SAAS,SAAS;AAClD,SAAO,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,IAAI,iBAAiB,WAAW,CAAC,EAAE,IAAI,qBAAqB;AACzF;AAEA,IAAM,SAAS,CAAC,SAAyB;AACvC,QAAM,cAAc,KAAK,IAAI,aAAa;AAC1C,QAAM,WAAW,YAAY,WAAW;AACxC,SAAO,OAAO,KAAK,QAAQ;AAC7B;AAEA,IAAM,uBAAuB,CAAC,SAAiB,WAA4B,cAAc,OAAO,EAAE,OAAO,MAAM;AAE/G,IAAM,cAAc,CAAC,cAAsB;AACzC,QAAM,MAAkB,UAAU,OAAO,SAAS;AAElD,QAAM,iBAAiB,eAAe;AACtC,QAAM,iBAAiB,eAAe;AACtC,QAAM,sBAAsB,iBAAiB;AAE7C,QAAM,aAAa,IAAI,MAAM,GAAG,cAAc;AAC9C,QAAM,oBAAoB,OAAO,UAAU;AAC3C,QAAM,SAAS,SAAS,kBAAkB,SAAS,KAAK,GAAG,EAAE,IAAI;AAEjE,QAAM,aAAa,IAAI,MAAM,gBAAgB,mBAAmB;AAChE,QAAM,oBAAoB,OAAO,UAAU;AAE3C,QAAM,cAAc,IAAI,MAAM,qBAAqB,sBAAsB,MAAM;AAC/E,QAAM,qBAAqB,OAAO,WAAW;AAE7C,MAAI,CAAC,qBAAqB,oBAAoB,iBAAiB;AAC7D,UAAM,IAAI,MAAM,sCAAsC;AAExD,SAAO;AACT;AAEO,IAAM,eAAe,CAAC,OAAe,UAA2B,aAAsB;AAC3F,QAAM,MAAW,iBAAI,KAAK,KAAK,KAAK;AACpC,QAAM,OAAO,YAAY,IAAI,IAAI;AACjC,QAAM,SAAS,WAAW,cAAc,MAAM,QAAQ,IAAI;AAC1D,SAAO,WAAW,OAAO,SAAS,QAAQ,IAAI;AAChD;;;AIlEA,IAAAC,gBAAoB;AAMpB,IAAM,gBAAgB,CAAC,YAAoB;AACzC,QAAM,YAAY,QAAQ,OAAO,SAAS,EAAE;AAC5C,QAAM,eAAe,OAAO,KAAK,UAAU,SAAS,IAAI,IAAI,SAAS,KAAK,WAAW,KAAK;AAC1F,QAAM,MAAM,OAAO,MAAM,eAAe,aAAa,MAAM;AAC3D,SAAO,OAAO,OAAO,CAAC,KAAK,YAAY,GAAG,YAAY;AACxD;AAEA,IAAM,SAAS,CAAC,SAAiB,CAAC,MAAc;AAC9C,QAAM,YAAY,KAAK,MAAM,IAAI,SAAS;AAC1C,QAAM,WAAW,IAAI;AAErB,QAAM,OAAO,KAAK,SAAS;AAC3B,QAAM,gBAAgB,YAAY,IAAI;AAEtC,UAAQ,QAAQ,iBAAiB;AAEnC;AAGA,IAAM,gBAAgB,CAAC,SAAiB,CAAC,MAAc,MAAgB,QAAQ,KAAM,IAAK,OAAO,IAAI,EAAE,CAAC;AAGxG,IAAM,YAAY,CAAC,CAAC,MAAM,GAAG,MAAa,IAAI,IAAI,cAAc,IAAI,CAAC;AAErE,IAAM,QAAQ,CAAC,WAAmB,YAAoB;AACpD,QAAM,iBAAiB,UAAU;AACjC,QAAM,eAAe,eAAe,eAAe,QAAQ;AAC3D,QAAM,gBAAgB,uBAAuB,YAAY;AAEzD,MAAI,iBAAiB;AAAe,UAAM,IAAI,MAAM,4CAA4C;AAEhG,QAAM,aAAa,cAAc,OAAO;AACxC,QAAM,aAAa,cAAc,OAAO;AAExC,QAAM,aAAa,UAAU,MAAM,GAAG,aAAa;AACnD,QAAM,eAAe,UAAU,MAAM,aAAa;AAElD,QAAM,CAAC,KAAK,KAAK,IAAI,iBAAiB,UAAU;AAEhD,QAAM,iBAAiB,eAAe;AACtC,QAAM,iBAAiB,eAAe;AAEtC,QAAM,2BAA2B,IAAI,MAAM,GAAG,cAAc;AAC5D,QAAM,2BAA2B,IAAI,MAAM,gBAAgB,iBAAiB,cAAc;AAC1F,QAAM,4BAA4B,IAAI,MAAM,iBAAiB,cAAc;AAE3E,QAAM,eAAe,OAAO;AAAA,IAC1B;AAAA,MACE,CAAC,YAAY,wBAAwB;AAAA,MACrC,CAAC,YAAY,wBAAwB;AAAA,MACrC,CAAC,SAAS,yBAAyB;AAAA,IACrC,EAAE,IAAI,SAAS;AAAA,IACf,IAAI;AAAA,EACN;AAEA,QAAM,aAAa,qBAAqB,cAAc,KAAK;AAC3D,QAAM,oBAAoB,OAAO,OAAO,CAAC,YAAY,YAAY,GAAG,cAAc;AAElF,SAAO;AACT;AAEO,IAAM,eAAe,CAAC,OAAe,SAA0B,UAA2B,aAAsB;AACrH,QAAM,gBAAwB,OAAO,SAAS,OAAO,IAAI,UAAU,OAAO,KAAK,SAAS,QAAQ;AAChG,QAAM,eAAuB,WAAW,cAAc,eAAe,QAAQ,IAAI;AAEjF,QAAM,MAAW,kBAAI,KAAK,KAAK,KAAK;AACpC,QAAM,OAAO,MAAM,IAAI,MAAM,YAAY;AACzC,QAAM,cAAmB,OAAO,OAAO,CAAC,GAAG,KAAK,EAAE,KAAK,CAAC;AAExD,SAAO,kBAAI,KAAK,MAAM,WAAW;AACnC;;;ALtEA,IAAMC,WAAU,IAAI,QAAQ;AAE5BA,SAAQ,KAAK,WAAW,EAAE,QAAQ,OAAO,EAAE,YAAY,WAAW;AAElEA,SACG,QAAQ,0DAA0D,EAClE,YAAY,6FAA6F,EACzG,OAAO,CAAC,UAAU,YAAY,WAAW,eAAe;AACvD,MAAI,SAAS,SAAS,GAAG;AACvB,YAAQ,IAAI,mDAAmD;AAAA,EACjE,OAAO;AACL,YAAQ,IAAI,WAAW,UAAU,YAAY,SAAS,gBAAgB,UAAU,EAAE;AAClF,UAAM,eAAW,wBAAa,SAAS;AACvC,UAAM,aAAS,wBAAa,UAAU;AACtC,UAAM,cAAc,aAAa,UAAU,QAAQ,QAAW,QAAQ;AACtE,iCAAc,YAAY,WAAW;AAAA,EACvC;AACF,CAAC;AAEHA,SACG,QAAQ,8CAA8C,EACtD,YAAY,gEAAgE,EAC5E,OAAO,CAAC,UAAU,WAAW,gBAAgB;AAC5C,UAAQ,IAAI,WAAW,SAAS,YAAY,WAAW,EAAE;AACzD,QAAM,eAAW,wBAAa,SAAS;AACvC,QAAM,cAAc,aAAa,UAAU,QAAW,QAAQ;AAC9D,+BAAc,aAAa,WAAW;AACxC,CAAC;AAEHA,SAAQ,MAAM;","names":["exports","module","extraTypingsCommander","import_pngjs","program"]}