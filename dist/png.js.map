{"version":3,"sources":["../src/png.ts","../src/defaults.ts"],"sourcesContent":["// const { BYTE_SIZE } = require('./defaults')\nimport { BYTE_SIZE } from './defaults';\n\nconst CHANNEL_COUNT = ['r', 'g', 'b', 'a'].length;\n\nexport const countBytesForNRgbBytes = (n: number) => Math.floor((n * BYTE_SIZE * CHANNEL_COUNT) / (CHANNEL_COUNT - 1));\n\nexport const isAlphaByte = (_: number, i: number) => !((i + 1) % CHANNEL_COUNT);\nexport const isRgbByte = (_: number, i: number) => (i + 1) % CHANNEL_COUNT;\n\nexport const recombineRgbAndAlpha = (rgb: Buffer, alpha: Uint8Array) =>\n  Buffer.from(\n    Array(rgb.length + alpha.length)\n      .fill(null)\n      .map((_, i) => ((i + 1) % CHANNEL_COUNT ? rgb[i - Math.floor(i / CHANNEL_COUNT)] : alpha[i % CHANNEL_COUNT]))\n  );\n\nexport const splitRgbAndAlpha = (data: Uint8Array) => {\n  const rgbBytes = data.filter(isRgbByte);\n  const alphaBytes = data.filter(isAlphaByte);\n  return [rgbBytes, alphaBytes];\n};\n","export const BYTE_SIZE = 8;\nexport const ENCRYPTION_METHOD = 'aes256';\nexport const LENGTH_BYTES = 8;\nexport const SHASUM_BYTES = 32;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,YAAY;;;ADGzB,IAAM,gBAAgB,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE;AAEpC,IAAM,yBAAyB,CAAC,MAAc,KAAK,MAAO,IAAI,YAAY,iBAAkB,gBAAgB,EAAE;AAE9G,IAAM,cAAc,CAAC,GAAW,MAAc,GAAG,IAAI,KAAK;AAC1D,IAAM,YAAY,CAAC,GAAW,OAAe,IAAI,KAAK;AAEtD,IAAM,uBAAuB,CAAC,KAAa,UAChD,OAAO;AAAA,EACL,MAAM,IAAI,SAAS,MAAM,MAAM,EAC5B,KAAK,IAAI,EACT,IAAI,CAAC,GAAG,OAAQ,IAAI,KAAK,gBAAgB,IAAI,IAAI,KAAK,MAAM,IAAI,aAAa,CAAC,IAAI,MAAM,IAAI,aAAa,CAAE;AAChH;AAEK,IAAM,mBAAmB,CAAC,SAAqB;AACpD,QAAM,WAAW,KAAK,OAAO,SAAS;AACtC,QAAM,aAAa,KAAK,OAAO,WAAW;AAC1C,SAAO,CAAC,UAAU,UAAU;AAC9B;","names":[]}